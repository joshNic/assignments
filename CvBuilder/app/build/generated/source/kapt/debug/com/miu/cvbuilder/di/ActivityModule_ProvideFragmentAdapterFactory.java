// Generated by Dagger (https://dagger.dev).
package com.miu.cvbuilder.di;

import android.content.Context;
import com.miu.cvbuilder.ui.fragments.adapters.CertificationAdapter;
import com.miu.cvbuilder.ui.fragments.adapters.ContactsAdapter;
import com.miu.cvbuilder.ui.fragments.adapters.EducationAdapter;
import com.miu.cvbuilder.ui.fragments.adapters.SectionsPagerAdapter;
import com.miu.cvbuilder.ui.fragments.adapters.WorkAdapter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("dagger.hilt.android.scopes.ActivityScoped")
@QualifierMetadata("dagger.hilt.android.qualifiers.ActivityContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ActivityModule_ProvideFragmentAdapterFactory implements Factory<SectionsPagerAdapter> {
  private final Provider<Context> activityContextProvider;

  private final Provider<ContactsAdapter> contactsAdapterProvider;

  private final Provider<CertificationAdapter> certificationAdapterProvider;

  private final Provider<EducationAdapter> educationAdapterProvider;

  private final Provider<WorkAdapter> workAdapterProvider;

  public ActivityModule_ProvideFragmentAdapterFactory(Provider<Context> activityContextProvider,
      Provider<ContactsAdapter> contactsAdapterProvider,
      Provider<CertificationAdapter> certificationAdapterProvider,
      Provider<EducationAdapter> educationAdapterProvider,
      Provider<WorkAdapter> workAdapterProvider) {
    this.activityContextProvider = activityContextProvider;
    this.contactsAdapterProvider = contactsAdapterProvider;
    this.certificationAdapterProvider = certificationAdapterProvider;
    this.educationAdapterProvider = educationAdapterProvider;
    this.workAdapterProvider = workAdapterProvider;
  }

  @Override
  public SectionsPagerAdapter get() {
    return provideFragmentAdapter(activityContextProvider.get(), contactsAdapterProvider.get(), certificationAdapterProvider.get(), educationAdapterProvider.get(), workAdapterProvider.get());
  }

  public static ActivityModule_ProvideFragmentAdapterFactory create(
      Provider<Context> activityContextProvider, Provider<ContactsAdapter> contactsAdapterProvider,
      Provider<CertificationAdapter> certificationAdapterProvider,
      Provider<EducationAdapter> educationAdapterProvider,
      Provider<WorkAdapter> workAdapterProvider) {
    return new ActivityModule_ProvideFragmentAdapterFactory(activityContextProvider, contactsAdapterProvider, certificationAdapterProvider, educationAdapterProvider, workAdapterProvider);
  }

  public static SectionsPagerAdapter provideFragmentAdapter(Context activityContext,
      ContactsAdapter contactsAdapter, CertificationAdapter certificationAdapter,
      EducationAdapter educationAdapter, WorkAdapter workAdapter) {
    return Preconditions.checkNotNullFromProvides(ActivityModule.INSTANCE.provideFragmentAdapter(activityContext, contactsAdapter, certificationAdapter, educationAdapter, workAdapter));
  }
}
